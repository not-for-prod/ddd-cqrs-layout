// Code generated by protoc-gen-goclay. DO NOT EDIT.

package reviewv1

import (
	context "context"
	_ "embed"
	runtime "github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	transport "github.com/not-for-prod/clay/transport"
	httptransport "github.com/not-for-prod/clay/transport/httptransport"
	grpc "google.golang.org/grpc"
)

//go:embed service.swagger.json
var Swagger []byte

// ReviewServiceServiceDesc is a descriptor/registrator for the ReviewServiceServer.
type ReviewServiceServiceDesc struct {
	svc  ReviewServiceServer
	opts httptransport.DescOptions
}

// NewReviewServiceServiceDesc creates new registrator for the ReviewServiceServer.
// It implements httptransport.ConfigurableServiceDesc as well.
func NewReviewServiceServiceDesc(i ReviewServiceServer) *ReviewServiceServiceDesc {
	return &ReviewServiceServiceDesc{svc: i}
}

// RegisterGRPC implements service registrator interface.
func (d *ReviewServiceServiceDesc) RegisterGRPC(s *grpc.Server) {
	RegisterReviewServiceServer(s, d.svc)
}

// Apply applies passed options.
func (d *ReviewServiceServiceDesc) Apply(oo ...transport.DescOption) {
	for _, o := range oo {
		o.Apply(&d.opts)
	}
}

// SwaggerDef returns this file's Swagger definition.
func (d *ReviewServiceServiceDesc) SwaggerDef() []byte {
	return Swagger
}

// RegisterHTTP registers this service's HTTP handlers/bindings.
func (w *ReviewServiceServiceDesc) RegisterHTTP(
	ctx context.Context,
	mux *runtime.ServeMux,
) error {
	return RegisterReviewServiceHandlerServer(ctx, mux, w)
}

// Wrap all http methods with interceptor support

func (w *ReviewServiceServiceDesc) AddReview(ctx context.Context, in *AddReviewRequest) (*AddReviewResponse, error) {
	if w.opts.UnaryInterceptor == nil {
		return w.svc.AddReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     w,
		FullMethod: "/yelp.review.v1.ReviewService/AddReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return w.svc.AddReview(ctx, req.(*AddReviewRequest))
	}
	resp, err := w.opts.UnaryInterceptor(ctx, in, info, handler)
	if err != nil || resp == nil {
		return nil, err
	}
	return resp.(*AddReviewResponse), err
}

func (w *ReviewServiceServiceDesc) ListReviews(ctx context.Context, in *ListReviewsRequest) (*ListReviewsResponse, error) {
	if w.opts.UnaryInterceptor == nil {
		return w.svc.ListReviews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     w,
		FullMethod: "/yelp.review.v1.ReviewService/ListReviews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return w.svc.ListReviews(ctx, req.(*ListReviewsRequest))
	}
	resp, err := w.opts.UnaryInterceptor(ctx, in, info, handler)
	if err != nil || resp == nil {
		return nil, err
	}
	return resp.(*ListReviewsResponse), err
}
