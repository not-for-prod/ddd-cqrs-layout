// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package listreviews

import (
	"context"
	"sync"
	applicationdto "yelp/internal/application/service/review/dto"
)

// Ensure, that reviewRepositoryMock does implement reviewRepository.
// If this is not the case, regenerate this file with moq.
var _ reviewRepository = &reviewRepositoryMock{}

// reviewRepositoryMock is a mock implementation of reviewRepository.
//
//	func TestSomethingThatUsesreviewRepository(t *testing.T) {
//
//		// make and configure a mocked reviewRepository
//		mockedreviewRepository := &reviewRepositoryMock{
//			ListFunc: func(ctx context.Context, req applicationdto.ListReviewRequest) (applicationdto.ListReviewResponse, error) {
//				panic("mock out the List method")
//			},
//		}
//
//		// use mockedreviewRepository in code that requires reviewRepository
//		// and then make assertions.
//
//	}
type reviewRepositoryMock struct {
	// ListFunc mocks the List method.
	ListFunc func(ctx context.Context, req applicationdto.ListReviewRequest) (applicationdto.ListReviewResponse, error)

	// calls tracks calls to the methods.
	calls struct {
		// List holds details about calls to the List method.
		List []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req applicationdto.ListReviewRequest
		}
	}
	lockList sync.RWMutex
}

// List calls ListFunc.
func (mock *reviewRepositoryMock) List(ctx context.Context, req applicationdto.ListReviewRequest) (applicationdto.ListReviewResponse, error) {
	if mock.ListFunc == nil {
		panic("reviewRepositoryMock.ListFunc: method is nil but reviewRepository.List was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req applicationdto.ListReviewRequest
	}{
		Ctx: ctx,
		Req: req,
	}
	mock.lockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	mock.lockList.Unlock()
	return mock.ListFunc(ctx, req)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//
//	len(mockedreviewRepository.ListCalls())
func (mock *reviewRepositoryMock) ListCalls() []struct {
	Ctx context.Context
	Req applicationdto.ListReviewRequest
} {
	var calls []struct {
		Ctx context.Context
		Req applicationdto.ListReviewRequest
	}
	mock.lockList.RLock()
	calls = mock.calls.List
	mock.lockList.RUnlock()
	return calls
}
