// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package addreview

import (
	"context"
	"sync"
	review "yelp/internal/domain/entity/review"
)

// Ensure, that reviewRepositoryMock does implement reviewRepository.
// If this is not the case, regenerate this file with moq.
var _ reviewRepository = &reviewRepositoryMock{}

// reviewRepositoryMock is a mock implementation of reviewRepository.
//
//	func TestSomethingThatUsesreviewRepository(t *testing.T) {
//
//		// make and configure a mocked reviewRepository
//		mockedreviewRepository := &reviewRepositoryMock{
//			AddFunc: func(ctx context.Context, reviewMoqParam review.Review) error {
//				panic("mock out the Add method")
//			},
//		}
//
//		// use mockedreviewRepository in code that requires reviewRepository
//		// and then make assertions.
//
//	}
type reviewRepositoryMock struct {
	// AddFunc mocks the Add method.
	AddFunc func(ctx context.Context, reviewMoqParam review.Review) error

	// calls tracks calls to the methods.
	calls struct {
		// Add holds details about calls to the Add method.
		Add []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ReviewMoqParam is the reviewMoqParam argument value.
			ReviewMoqParam review.Review
		}
	}
	lockAdd sync.RWMutex
}

// Add calls AddFunc.
func (mock *reviewRepositoryMock) Add(ctx context.Context, reviewMoqParam review.Review) error {
	if mock.AddFunc == nil {
		panic("reviewRepositoryMock.AddFunc: method is nil but reviewRepository.Add was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		ReviewMoqParam review.Review
	}{
		Ctx:            ctx,
		ReviewMoqParam: reviewMoqParam,
	}
	mock.lockAdd.Lock()
	mock.calls.Add = append(mock.calls.Add, callInfo)
	mock.lockAdd.Unlock()
	return mock.AddFunc(ctx, reviewMoqParam)
}

// AddCalls gets all the calls that were made to Add.
// Check the length with:
//
//	len(mockedreviewRepository.AddCalls())
func (mock *reviewRepositoryMock) AddCalls() []struct {
	Ctx            context.Context
	ReviewMoqParam review.Review
} {
	var calls []struct {
		Ctx            context.Context
		ReviewMoqParam review.Review
	}
	mock.lockAdd.RLock()
	calls = mock.calls.Add
	mock.lockAdd.RUnlock()
	return calls
}
